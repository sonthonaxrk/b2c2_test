import warnings
import asyncio

from events import Events
from b2c2.views.instrument import InstrumentView
from b2c2.views.quote import QuoteView
from b2c2.views.history import HistoryView
from b2c2.open_api_client import OpenAPIClient
from b2c2.models import (
    Instruments, RequestForQuote, Quote,
    Trade, TradeResponse, Balances
)


class _gui_descriptor:
    def __init__(self, gui_cls):
        self._gui_cls = gui_cls

    def __get__(self, _obj, objtype=None):
        """
        Returns a GUI element that's bound to
        the client instance.

        Makes _client implicitly available.

        I know this looks dirty, but the client
        is effectively the application object,
        and that's typically a singleton. The alternative
        is to pass around the client to everything (messy code
        everywhere) or use a threadlocal (very dirty).
        """
        if not _obj._client._loop:
            warnings.warn(
                'Trying to access GUI without an event loop.',
                RuntimeWarning
            )

        return type(
            self._gui_cls.__name__, (self._gui_cls, ),
            {'_client': _obj._client}
        )


class _gui:
    instrument_selector = _gui_descriptor(InstrumentView)
    quote_executor = _gui_descriptor(QuoteView)
    history = _gui_descriptor(HistoryView)

    def __init__(self, client):
        self._client = client


class History:
    """
    Interactive users will probably want a history
    of what they have requested and traded.
    """

    def add_trade(self, trade: TradeResponse):
        self.completed_trades.append(trade)
        self.events.trade_add()

    def add_quote(self, quote: Quote):
        self.quotes.append(quote)
        self.events.quote_add()

    def subscribe_trades(self, callback):
        self.events.trade_add += callback

    def unsubscribe_trades(self, callback):
        self.events.trade_add -= callback

    def subscribe_quotes(self, callback):
        self.events.quote_add += callback

    def unsubscribe_quotes(self, callback):
        self.events.quote_add -= callback

    def __init__(self):
        self.completed_trades = []
        self.quotes = []
        self.events = Events()


class BaseB2C2APIClient(OpenAPIClient):
    """
    Base API client. Useful for application
    developers.
    """
    class Meta:
        # This is a poor mans OpenAPI definition.
        #
        # This is passed into the Meta class of the B2C2APIClient
        # and it's methods are generated from it.
        #
        # I did not create a real OpenAPI specification due to time
        # constraints. But this *should* suffice to get the gist of
        # what I am doing across.
        definition = {
            '/instruments/': {
                'GET': {
                    'response': Instruments
                }
            },
            '/request_for_quote/': {
                'POST': {
                    'body': RequestForQuote,
                    'response': Quote
                }
            },
            '/trade/': {
                'POST': {
                    'body': Trade,
                    'response': TradeResponse,
                }
            },
            '/balance/': {
                'GET': {
                    'response': Balances
                }
            }
        }


class B2C2APIClient(BaseB2C2APIClient):
    """
    Rich GUI API client. Useful for exploring
    data on Jupyter.
    """
    # Methods like
    # get_instruments(self)
    # are autogenerated from the open spec

    def __init__(self, *args):
        super().__init__(*args)
        # The Gui class uses descriptors to
        # provide a reference to clients
        self._loop = None

        try:
            self._loop = asyncio.get_running_loop()
        except RuntimeError:
            warnings.warn(
                'No event loop found. The GUI must run '
                'in an asyncio event loop. Jupyter should '
                'provide this. Try the line magic `%%gui async`.',
                RuntimeWarning
            )

        self.gui = _gui(self)
        self.history = History()

    # I appreciate that I am copying the annotations
    # onto these overriden methods. I think there's
    # a way to get mypy to automatically do this.

    def post_trade(self, body: Trade) -> TradeResponse:
        resp = super().post_trade(body)
        self.history.add_trade(resp)
        return resp

    def post_request_for_quote(self, body: RequestForQuote) -> Quote:
        resp = super().post_request_for_quote(body)
        self.history.add_quote(resp)
        return resp
